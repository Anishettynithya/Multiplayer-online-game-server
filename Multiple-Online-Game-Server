BACKEND:-require('dotenv').config();
const express = require('express');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);

app.use(cors()); // Enable CORS
app.use(express.json());

const io = new Server(server, {
    cors: {
        origin: "http://localhost:3000", // React frontend
        methods: ["GET", "POST"]
    }
});

// Store players' positions
let players = {};

io.on('connection', (socket) => {
    console.log(`User Connected: ${socket.id}`);

    // Add new player
    players[socket.id] = { x: 0, y: 0 };

    // Broadcast updated players list
    io.emit('updatePlayers', players);

    // Handle player movement
    socket.on('move', (data) => {
        if (players[socket.id]) {
            players[socket.id] = data;
            io.emit('updatePlayers', players);
        }
    });

    // Handle disconnection
    socket.on('disconnect', () => {
        console.log(`User Disconnected: ${socket.id}`);
        delete players[socket.id];
        io.emit('updatePlayers', players);
    });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));
FRONTEND:-import React, { useState, useEffect } from 'react';
import { io } from 'socket.io-client';

const socket = io("http://localhost:5000"); // Connect to backend

const App = () => {
    const [players, setPlayers] = useState({});
    const [position, setPosition] = useState({ x: 0, y: 0 });

    // Listen for player updates
    useEffect(() => {
        socket.on('updatePlayers', (players) => {
            setPlayers(players);
        });

        return () => socket.off('updatePlayers');
    }, []);

    // Move player with arrow keys
    useEffect(() => {
        const handleKeyDown = (event) => {
            let { x, y } = position;
            if (event.key === "ArrowUp") y -= 10;
            if (event.key === "ArrowDown") y += 10;
            if (event.key === "ArrowLeft") x -= 10;
            if (event.key === "ArrowRight") x += 10;
            
            const newPosition = { x, y };
            setPosition(newPosition);
            socket.emit("move", newPosition);
        };

        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
    }, [position]);

    return (
        <div>
            <h1>Multiplayer Game</h1>
            <div style={{ position: "relative", width: "500px", height: "500px", border: "1px solid black" }}>
                {Object.entries(players).map(([id, pos]) => (
                    <div key={id} style={{
                        position: "absolute",
                        left: pos.x + "px",
                        top: pos.y + "px",
                        width: "20px",
                        height: "20px",
                        backgroundColor: id === socket.id ? "blue" : "red"
                    }} />
                ))}
            </div>
        </div>
    );
};

export default App;
